import React from 'react';
import { Button, Snackbar, Alert } from '@mui/material';
import * as XLSX from 'xlsx';
import { log } from '../utils/Logger';

const FileUploader = ({ setData, data, analysis, setAnalysis }) => {
  const [error, setError] = React.useState(null);

  const addToTestHistory = (newData, fileName = '') => {
    try {
      const testEntry = {
        id: Date.now() + Math.random(),
        timestamp: new Date().toISOString(),
        data: newData,
        analysis: {
          distribution: '',
          parameters: {},
          empiricalFrequencies: [],
          theoreticalFrequencies: { Poisson: [], Binomial: [], NegativeBinomial: [] },
          chiSquareValues: { Poisson: 0, Binomial: 0, NegativeBinomial: 0, criticalValue: 0 },
          pValues: { Poisson: 0, Binomial: 0, NegativeBinomial: 0 },
          degreesOfFreedom: 0,
          significanceLevel: 0.05,
          hypothesisAccepted: false,
          binLabels: [],
          meanCI: [],
          varianceCI: [],
        },
        source: fileName ? 'file_upload' : 'project_load',
        fileName: fileName,
        dataStats: {
          recordCount: newData.length,
          totalItems: newData.reduce((sum, row) => sum + row.total, 0),
          totalDefects: newData.reduce((sum, row) => sum + row.defects, 0),
          averageDefectRate: newData.length > 0 ? 
            newData.reduce((sum, row) => sum + (row.defects / row.total), 0) / newData.length : 0
        }
      };

      const existingHistory = JSON.parse(localStorage.getItem('testHistory') || '[]');
      const updatedHistory = [...existingHistory, testEntry];
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 100 –∑–∞–ø–∏—Å–µ–π
      if (updatedHistory.length > 100) {
        updatedHistory.splice(0, updatedHistory.length - 100);
      }
      
      localStorage.setItem('testHistory', JSON.stringify(updatedHistory));
      
      log('info', '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤', {
        historyId: testEntry.id,
        source: testEntry.source,
        fileName: fileName,
        recordCount: testEntry.dataStats.recordCount,
        totalHistoryItems: updatedHistory.length
      });
      
      return testEntry.id;
    } catch (error) {
      log('error', '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é —Ç–µ—Å—Ç–æ–≤', { error: error.message });
      return null;
    }
  };

  const handleFile = (e) => {
    const file = e.target.files[0];
    if (!file) {
      setError('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
      log('error', '–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
      return;
    }

    log('info', 'üîÑ –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê', { 
      fileName: file.name, 
      fileSize: file.size,
      fileType: file.type,
      lastModified: new Date(file.lastModified).toISOString()
    });

    const reader = new FileReader();

    reader.onload = (event) => {
      try {
        log('info', '–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞', { 
          fileLength: event.target.result.length 
        });

        const fileType = file.name.split('.').pop().toLowerCase();
        let jsonData;

        log('debug', '–û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Ñ–∞–π–ª–∞', { fileType });

        if (fileType === 'csv') {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV
          log('debug', '–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞');
          const text = event.target.result;
          const workbook = XLSX.read(text, { type: 'string' });
          const sheetName = workbook.SheetNames[0];
          jsonData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {
            header: 1,
            raw: false,
          });
          
          log('debug', 'CSV parsed, —Å—Ç—Ä–æ–∫ –Ω–∞–π–¥–µ–Ω–æ', { rawRows: jsonData.length });
          
          // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫ –≤ –æ–±—ä–µ–∫—Ç—ã
          jsonData = jsonData.slice(1).map((row, index) => {
            const result = {
              party_number: Number(row[0]),
              details_in_party: Number(row[1]),
              defects_in_party: Number(row[2]),
            };
            
            if (index < 5) { // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              log('debug', `CSV —Å—Ç—Ä–æ–∫–∞ ${index + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`, result);
            }
            
            return result;
          });
        } else if (['xlsx', 'xls'].includes(fileType)) {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel
          log('debug', '–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞');
          const data = new Uint8Array(event.target.result);
          const workbook = XLSX.read(data, { type: 'array' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          
          log('debug', 'Excel workbook –æ–±—Ä–∞–±–æ—Ç–∞–Ω', { 
            sheetNames: workbook.SheetNames,
            activeSheet: sheetName 
          });
          
          jsonData = XLSX.utils.sheet_to_json(worksheet);
          
          log('debug', 'Excel –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã', { 
            recordCount: jsonData.length,
            sampleRecord: jsonData[0] 
          });
        } else {
          throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .csv, .xlsx –∏–ª–∏ .xls');
        }

        log('info', '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é', { 
          rawRecordCount: jsonData.length 
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        const formattedData = jsonData.map((row, index) => {
          const total = Number(row.details_in_party);
          const defects = Number(row.defects_in_party);
          
          if (isNaN(total) || isNaN(defects)) {
            const error = `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ ${index + 2}: total=${total}, defects=${defects}`;
            log('error', '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–∞', { 
              rowIndex: index + 2, 
              total, 
              defects,
              originalRow: row
            });
            throw new Error(error);
          }
          
          if (total < 0 || defects < 0 || defects > total) {
            const error = `–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä–æ–∫–µ ${index + 2}: total=${total}, defects=${defects} (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ defects > total)`;
            log('error', '–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ - –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏', { 
              rowIndex: index + 2, 
              total, 
              defects,
              issues: {
                negativetTotal: total < 0,
                negativeDefects: defects < 0,
                defectsExceedTotal: defects > total
              }
            });
            throw new Error(error);
          }
          
          return { total, defects };
        });

        if (formattedData.length === 0) {
          log('error', '–§–∞–π–ª –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
          throw new Error('–§–∞–π–ª –ø—É—Å—Ç');
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        const dataStats = {
          recordCount: formattedData.length,
          totalItems: formattedData.reduce((sum, row) => sum + row.total, 0),
          totalDefects: formattedData.reduce((sum, row) => sum + row.defects, 0),
          minDefects: Math.min(...formattedData.map(row => row.defects)),
          maxDefects: Math.max(...formattedData.map(row => row.defects)),
          minTotal: Math.min(...formattedData.map(row => row.total)),
          maxTotal: Math.max(...formattedData.map(row => row.total)),
        };
        
        dataStats.averageDefectRate = dataStats.totalItems > 0 ? 
          dataStats.totalDefects / dataStats.totalItems : 0;

        log('info', '‚úÖ –§–ê–ô–õ –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù –ò –í–ê–õ–ò–î–ò–†–û–í–ê–ù', {
          fileName: file.name,
          fileType,
          ...dataStats
        });

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setData(formattedData);
        setError(null);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const newAnalysis = {
          distribution: '',
          parameters: {},
          empiricalFrequencies: [],
          theoreticalFrequencies: { Poisson: [], Binomial: [], NegativeBinomial: [] },
          chiSquareValues: { Poisson: 0, Binomial: 0, NegativeBinomial: 0, criticalValue: 0 },
          pValues: { Poisson: 0, Binomial: 0, NegativeBinomial: 0 },
          degreesOfFreedom: 0,
          significanceLevel: 0.05,
          hypothesisAccepted: false,
          binLabels: [],
          meanCI: [],
          varianceCI: [],
        };
        
        setAnalysis(newAnalysis);

        // –£–î–ê–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é - —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
        log('info', '–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');

      } catch (error) {
        log('error', '‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–ê', { 
          fileName: file.name,
          error: error.message,
          stack: error.stack 
        });
        setError(error.message);
      }
    };

    reader.onerror = (error) => {
      log('error', '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞', { 
        fileName: file.name,
        error: error.message 
      });
      setError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞');
    };

    if (file.name.endsWith('.csv')) {
      reader.readAsText(file);
    } else {
      reader.readAsArrayBuffer(file);
    }
  };

  const handleSaveProject = () => {
    try {
      log('info', '–ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞', { 
        dataLength: data.length,
        hasAnalysis: !!analysis.distribution 
      });

      const project = { 
        data, 
        analysis,
        timestamp: new Date().toISOString(),
        version: '1.0'
      };
      
      localStorage.setItem('defectAnalyzerProject', JSON.stringify(project));
      
      log('info', '‚úÖ –ü–†–û–ï–ö–¢ –°–û–•–†–ê–ù–Å–ù', { 
        dataLength: data.length,
        analysisDistribution: analysis.distribution,
        timestamp: project.timestamp
      });
      
      setError(null);
      alert('–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
    } catch (error) {
      log('error', '‚ùå –û–®–ò–ë–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–ê', { 
        error: error.message,
        dataLength: data.length 
      });
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞');
    }
  };

  const handleLoadProject = () => {
    try {
      log('info', '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞');

      const project = localStorage.getItem('defectAnalyzerProject');
      if (!project) {
        log('error', '–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ localStorage');
        setError('–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      const { data: loadedData, analysis: loadedAnalysis, timestamp, version } = JSON.parse(project);
      
      log('info', '–ü—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω –≤ localStorage', {
        dataLength: loadedData?.length || 0,
        analysisDistribution: loadedAnalysis?.distribution || 'none',
        savedTimestamp: timestamp,
        projectVersion: version
      });

      setData(loadedData);
      setAnalysis(loadedAnalysis);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–±–µ–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
      if (loadedData && loadedData.length > 0) {
        const historyId = addToTestHistory(loadedData, '');
        log('info', '–ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ', { historyId });
      }

      log('info', '‚úÖ –ü–†–û–ï–ö–¢ –ó–ê–ì–†–£–ñ–ï–ù', { 
        dataLength: loadedData?.length || 0,
        analysisDistribution: loadedAnalysis?.distribution || 'none'
      });
      
      setError(null);
      alert('–ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω!');
    } catch (error) {
      log('error', '‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ü–†–û–ï–ö–¢–ê', { 
        error: error.message,
        stack: error.stack 
      });
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–∞');
    }
  };

  const handleCloseSnackbar = () => {
    log('debug', '–ó–∞–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ', { error });
    setError(null);
  };

  return (
    <div className="flex gap-4 flex-col">
      <Button
        variant="contained"
        component="label"
        className="bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg"
      >
        –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
        <input type="file" hidden onChange={handleFile} accept=".xlsx,.xls,.csv" />
      </Button>
      <Button
        variant="contained"
        onClick={handleSaveProject}
        className="bg-purple-500 hover:bg-purple-600 text-white font-semibold py-2 px-4 rounded-lg"
      >
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
      </Button>
      <Button
        variant="contained"
        onClick={handleLoadProject}
        className="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg"
      >
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
      </Button>
      <Snackbar open={!!error} autoHideDuration={6000} onClose={handleCloseSnackbar}>
        <Alert onClose={handleCloseSnackbar} severity="error" sx={{ width: '100%' }}>
          {error}
        </Alert>
      </Snackbar>
    </div>
  );
};

export default FileUploader;
